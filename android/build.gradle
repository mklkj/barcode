buildscript {
    repositories {
        mavenCentral()
        google()
//        maven { url ARTIFACTORY_RELEASE }
//        maven { url ARTIFACTORY_SNAPSHOT }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
//        classpath 'jp.co.rakuten.sdtd.plugin:artifactory:1.2.0'
//        classpath 'jp.co.rakuten.sdtd.plugin:javadoc:1.1.1'
    }
}

subprojects {
    rootProject.buildscript.repositories.each { repositories.add(it) }

    apply plugin: 'com.android.library'
    android {
        compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
        buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

        defaultConfig {
            minSdkVersion project.ANDROID_MIN_SDK_VERSION
            targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
            versionCode 1
            versionName project.MODULE_VERSION
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a','x86', 'x86_64'
            }
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-' + project.ANDROID_MIN_SDK_VERSION,
                        '-DANDROID_TOOLCHAIN=clang'//, '-DANDROID_STL=gnustl_static'
                }
            }
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        buildTypes {
            debug {
                resValue 'string', project.MODULE_NAME.replaceAll('-','_') + '__version', project.MODULE_VERSION
            }
            release {
                resValue 'string', project.MODULE_NAME.replaceAll('-','_') + '__version', project.MODULE_VERSION

                minifyEnabled true
                proguardFiles '../proguard.txt'
            }
        }

        lintOptions {
            disable 'LongLogTag', 'RtlHardcoded'
        }

        resourcePrefix 'barcode_'
    }

    dependencies {
        implementation "com.android.support:appcompat-v7:28.0.0"

        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test:rules:1.0.2'
//        testImplementation 'jp.co.rakuten.api:test:1.0.0'
        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.hamcrest:hamcrest-core:1.3'
        testImplementation 'org.mockito:mockito-core:2.25.0'
        testImplementation('org.robolectric:robolectric:4.7.3') {
            exclude group: 'commons-logging', module: 'commons-logging'
        }
//         Required for now. See https://github.com/robolectric/robolectric/issues/2581
//        testCompile 'jp.co.rakuten.esd:testrunner:1.0.0'
    }

//     http://chrisjenx.com/gradle-robolectric-jacoco-dagger/
    apply plugin: "jacoco"

    jacoco {
        toolVersion "0.8.7"
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled = true
            html.enabled = true
        }
        classDirectories.setFrom(fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/BuildConfig.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ]))
        sourceDirectories.setFrom(files( ['src/main/java' ] ))
        executionData.setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))
    }

//    apply plugin: 'jp.co.rakuten.sdtd.javadoc'
//    javadoc {
//        name = project.MODULE_NAME
//        version = project.MODULE_VERSION
//        title = project.MODULE_DESCRIPTION
//    }
//
////    apply plugin: 'jp.co.rakuten.sdtd.artifactory'
//    artifactory {
//        group = project.MODULE_GROUP
//        artifact = project.MODULE_NAME
//        version = project.MODULE_VERSION
//        description = project.MODULE_DESCRIPTION
//        sourceUrl = project.MODULE_REPOSITORY
//    }
}

// vim:et:sts=4:sw=4:ts=4:ff=unix:
